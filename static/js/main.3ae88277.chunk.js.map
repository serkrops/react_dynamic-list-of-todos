{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","handleSelectButton","handleSelectedTodoUserId","handleSelectTodo","handleShowSelectedTodoButton","showButtonHide","selectedTodo","className","map","todo","classnames","id","completed","title","type","onClick","userId","TodoFilter","handleSelectedFilter","selectedFilter","query","handleQueryChange","resetForm","value","onChange","placeholder","length","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","Loader","TodoModal","selectedTodoUserId","useState","selectedTodoUser","setSelectedTodoUser","closeButtonOn","setCloseButtonOn","loading","setLoading","useEffect","finally","href","email","name","App","setTodos","setSelectedFilter","setQuery","isSelectedTodo","setIsSelectedTodo","setSelectedTodo","setSelectedTodoUserId","setShowButtonHide","visibleTodos","filter","toLowerCase","includes","prevTodos","event","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ae88277.chunk.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport { Todo } from '../../types/Todo';\n// import { getTodos } from '../../api';\n\ntype Props = {\n  todos: Todo[],\n  handleSelectedTodoUserId: (userId: number) => void,\n  handleSelectTodo: (todo: Todo) => void,\n  handleShowSelectedTodoButton: (value: boolean) => void,\n  handleSelectButton: (value: boolean) => void,\n  showButtonHide: boolean,\n  selectedTodo: null | Todo,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  handleSelectButton,\n  handleSelectedTodoUserId,\n  handleSelectTodo,\n  handleShowSelectedTodoButton,\n  showButtonHide,\n  selectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classnames({\n              'has-background-info-light': selectedTodo?.id === todo.id,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classnames(\n                todo.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger',\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  handleSelectButton(true);\n                  handleSelectedTodoUserId(todo.userId);\n                  handleSelectTodo(todo);\n                  handleShowSelectedTodoButton(true);\n                }}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classnames('far', {\n                      'fa-eye': !showButtonHide,\n                      'fa-eye-slash': showButtonHide,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  handleSelectedFilter: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  selectedFilter: string,\n  query: string,\n  handleQueryChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  resetForm: () => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  handleSelectedFilter,\n  selectedFilter,\n  query,\n  handleQueryChange,\n  resetForm,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedFilter}\n            onChange={handleSelectedFilter}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query.length > 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={resetForm}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(5)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport classnames from 'classnames';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  selectedTodoUserId: number,\n  selectedTodo: Todo | null,\n  handleShowSelectedTodoButton: (value: boolean) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodoUserId,\n  selectedTodo,\n  handleShowSelectedTodoButton,\n}) => {\n  const [selectedTodoUser, setSelectedTodoUser] = useState<null | User>(null);\n  const [closeButtonOn, setCloseButtonOn] = useState(true);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    getUser(selectedTodoUserId)\n      .then(setSelectedTodoUser)\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <div\n      className={classnames('modal', {\n        'is-active': closeButtonOn,\n      })}\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {loading\n        ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${selectedTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => {\n                  setCloseButtonOn(!closeButtonOn);\n                  handleShowSelectedTodoButton(false);\n                }}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {selectedTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {selectedTodo?.completed\n                  ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  ) : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n\n                {' by '}\n\n                <a href={`mailto:${selectedTodoUser?.email}`}>\n                  {selectedTodoUser?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [isSelectedTodo, setIsSelectedTodo] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<null | Todo>(null);\n  const [selectedTodoUserId, setSelectedTodoUserId] = useState(0);\n  const [showButtonHide, setShowButtonHide] = useState(false);\n\n  const visibleTodos = todos.filter(({ title }) => title.toLowerCase().includes(query.toLowerCase()));\n\n  // сделать фильтрацию отдельно от сервера\n  useEffect(() => {\n    if (selectedFilter === 'all') {\n      getTodos()\n        .then(setTodos)\n        .finally(() => setLoading(false));\n    } else if (selectedFilter === 'completed') {\n      getTodos()\n        .then(prevTodos => setTodos(prevTodos.filter(({ completed }) => completed)))\n        .finally(() => setLoading(false));\n    } else {\n      getTodos()\n        .then(prevTodos => setTodos(prevTodos.filter(({ completed }) => !completed)))\n        .finally(() => setLoading(false));\n    }\n  }, [selectedFilter]);\n\n  const handleSelectedFilter = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedFilter(event.target.value);\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleSelectButton = (value: boolean) => {\n    setIsSelectedTodo(value);\n  };\n\n  const handleSelectedTodoUserId = (userId: number) => {\n    setSelectedTodoUserId(userId);\n  };\n\n  const handleSelectTodo = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const handleShowSelectedTodoButton = (value: boolean) => {\n    setShowButtonHide(value);\n  };\n\n  const resetForm = () => {\n    setQuery('');\n    setSelectedFilter('all');\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                handleSelectedFilter={handleSelectedFilter}\n                selectedFilter={selectedFilter}\n                query={query}\n                handleQueryChange={handleQueryChange}\n                resetForm={resetForm}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading && (\n                <Loader />\n              )}\n              {!loading && (\n                <TodoList\n                  todos={visibleTodos}\n                  handleSelectButton={handleSelectButton}\n                  handleSelectedTodoUserId={handleSelectedTodoUserId}\n                  handleSelectTodo={handleSelectTodo}\n                  handleShowSelectedTodoButton={handleShowSelectedTodoButton}\n                  showButtonHide={showButtonHide}\n                  selectedTodo={selectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {isSelectedTodo && showButtonHide && (\n        <TodoModal\n          selectedTodoUserId={selectedTodoUserId}\n          selectedTodo={selectedTodo}\n          handleShowSelectedTodoButton={handleShowSelectedTodoButton}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}