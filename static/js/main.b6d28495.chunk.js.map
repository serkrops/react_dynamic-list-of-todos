{"version":3,"sources":["types/TodoStatus.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","utils/constants.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","helpers/getFilteredTodos.tsx","index.tsx"],"names":["TodoStatus","TodoItem","todo","selectedTodoId","onSelectedTodo","isTodoSelected","id","className","classNames","completed","title","type","onClick","TodoList","todos","map","FILTER_OPTIONS","value","All","label","Active","Completed","TodoFilter","selectedFilter","setSelectedFilter","query","setQuery","onChange","event","target","option","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","catch","Error","finally","href","email","name","App","setTodos","selectedTodo","setSelectedTodo","filteredTodos","useMemo","lowerCaseQuery","toLowerCase","filter","includes","getFilteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6d28495.chunk.js","sourcesContent":["export enum TodoStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  selectedTodoId?: number,\n  onSelectedTodo: (todo: Todo) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  selectedTodoId,\n  onSelectedTodo,\n}) => {\n  const isTodoSelected = todo.id === selectedTodoId;\n\n  return (\n    <tr\n      key={todo.id}\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': isTodoSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">{todo.id}</td>\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames({\n          'has-text-danger': !todo.completed,\n          'has-text-success': todo.completed,\n        })}\n        >\n          {todo.title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            onSelectedTodo(todo);\n          }}\n        >\n          <span className=\"icon\">\n            <i className={classNames('far', {\n              'fa-eye': !isTodoSelected,\n              'fa-eye-slash': isTodoSelected,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodoId?: number,\n  onSelectedTodo: (todo: Todo) => void\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  onSelectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          selectedTodoId={selectedTodoId}\n          onSelectedTodo={onSelectedTodo}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import { TodoStatus } from '../types/TodoStatus';\n\nexport const FILTER_OPTIONS = [\n  { value: TodoStatus.All, label: 'All' },\n  { value: TodoStatus.Active, label: 'Active' },\n  { value: TodoStatus.Completed, label: 'Completed' },\n];\n","import React from 'react';\nimport { TodoStatus } from '../../types/TodoStatus';\nimport { FILTER_OPTIONS } from '../../utils/constants';\n\ntype Props = {\n  selectedFilter: TodoStatus,\n  setSelectedFilter: (status: TodoStatus) => void,\n  query: string,\n  setQuery: (query: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  selectedFilter,\n  setSelectedFilter,\n  query,\n  setQuery,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={selectedFilter}\n            data-cy=\"statusSelect\"\n            onChange={(event) => {\n              setSelectedFilter(event.target.value as TodoStatus);\n            }}\n          >\n            {FILTER_OPTIONS.map(option => (\n              <option\n                key={option.value}\n                value={option.value}\n              >\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            setQuery(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                setQuery('');\n                setSelectedFilter(TodoStatus.All);\n              }}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  onSelectedTodo: (todo: null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onSelectedTodo }) => {\n  const [user, setUser] = useState<null | User>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getUser(todo.userId)\n      .then(setUser)\n      .catch(() => {\n        throw new Error('Error');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                onSelectedTodo(null);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed\n                ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\nimport { TodoModal } from './components/TodoModal';\nimport { TodoStatus } from './types/TodoStatus';\nimport { getFilteredTodos } from './helpers/getFilteredTodos';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<null | Todo>(null);\n  const [selectedFilter, setSelectedFilter] = useState(TodoStatus.All);\n  const [query, setQuery] = useState('');\n\n  const filteredTodos = useMemo(() => {\n    const lowerCaseQuery = query.toLowerCase();\n\n    return getFilteredTodos(todos, selectedFilter, lowerCaseQuery);\n  }, [selectedFilter, query, todos]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(setTodos)\n      .catch(() => {\n        throw new Error('Error');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter\n                selectedFilter={selectedFilter}\n                setSelectedFilter={setSelectedFilter}\n                query={query}\n                setQuery={setQuery}\n              />\n            </div>\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <Loader />\n                ) : (\n                  <TodoList\n                    todos={filteredTodos}\n                    selectedTodoId={selectedTodo?.id}\n                    onSelectedTodo={setSelectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onSelectedTodo={setSelectedTodo}\n        />\n      )}\n\n    </>\n  );\n};\n","import { TodoStatus } from '../types/TodoStatus';\nimport { Todo } from '../types/Todo';\n\nexport function getFilteredTodos(\n  todos: Todo[],\n  selectedFilter: TodoStatus,\n  lowerCaseQuery: string,\n) {\n  return todos\n    .filter(todo => {\n      switch (selectedFilter) {\n        case TodoStatus.Active:\n          return !todo.completed;\n        case TodoStatus.Completed:\n          return todo.completed;\n        default:\n          return true;\n      }\n    })\n    .filter(todo => (\n      todo.title.toLowerCase().includes(lowerCaseQuery)\n    ));\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}